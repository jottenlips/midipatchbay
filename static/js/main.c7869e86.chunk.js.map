{"version":3,"sources":["Router.jsx","App.js","serviceWorker.js","index.js"],"names":["Router","basename","to","exact","path","Home","Synth","message","JSON","stringify","note","onClick","fetch","method","body","useState","output","setOutput","midi","useMIDI","EventSource","onmessage","event","console","log","data","getOutputById","playNote","value","onChange","e","target","outputs","map","out","key","id","name","style","padding","margin","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"mRAIaA,EAAS,WACpB,OACE,kBAAC,IAAD,CAAeC,SAAS,iBACtB,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,eAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,kBAIJ,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAACE,EAAD,WAWZ,SAASD,IACP,IAAME,EAAUC,KAAKC,UAAU,CAC7BC,KAAM,OAGR,OACE,6BACE,sDACA,4BACEC,QAAS,WACPC,MAAM,uCAAwC,CAC5CC,OAAQ,OACRC,KAAK,SAAD,OAAWP,EAAX,YAJV,OAcN,SAASD,IAAS,IAAD,EACaS,qBADb,mBACRC,EADQ,KACAC,EADA,KAETC,EAAOC,oBASb,OARkB,IAAIC,YACpB,8EAEQC,UAAY,SAAUC,GAC9BC,QAAQC,IAAIF,EAAMG,MAClBP,EAAKQ,cAAcV,GAAQW,SAAS,OAIpC,6BACE,sCACA,4BACEC,MAAOZ,EACPa,SAAU,SAACC,GACTb,EAAUa,EAAEC,OAAOH,SAGpBV,EAAKc,SACJd,EAAKc,QAAQC,KAAI,SAACC,GAAD,OACf,4BAAQC,IAAKD,EAAIE,GAAIR,MAAOM,EAAIE,IAC7BF,EAAIG,UAKb,4BACEC,MAAO,CACLC,QAAS,OACTC,OAAQ,QAEV7B,QAAS,WACPK,GACEE,EAAKQ,eACLR,EAAKQ,cAAcV,GAAQW,SAAS,QAR1C,sBCvESc,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMrD,c","file":"static/js/main.c7869e86.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { useMIDI } from \"react-use-midi/lib\";\n\nexport const Router = () => {\n  return (\n    <BrowserRouter basename=\"/midipatchbay\">\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Play Synth</Link>\n          </li>\n          <li>\n            <Link to=\"/synth\">Synth Output</Link>\n          </li>\n        </ul>\n\n        <hr />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/synth\">\n            <Synth />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  const message = JSON.stringify({\n    note: \"C4\",\n  });\n\n  return (\n    <div>\n      <h2>Play My Synth Remotely</h2>\n      <button\n        onClick={() => {\n          fetch(\"https://patchbay.pub/pubsub/midichat\", {\n            method: \"POST\",\n            body: `data: ${message}\\n\\n`,\n          });\n        }}\n      >\n        C4\n      </button>\n    </div>\n  );\n}\n\nfunction Synth() {\n  const [output, setOutput] = useState();\n  const midi = useMIDI();\n  const evtSource = new EventSource(\n    \"https://patchbay.pub/pubsub/midichat?mime=text%2Fevent-stream&persist=true\"\n  );\n  evtSource.onmessage = function (event) {\n    console.log(event.data);\n    midi.getOutputById(output).playNote(\"C3\");\n  };\n\n  return (\n    <div>\n      <h2>Output</h2>\n      <select\n        value={output}\n        onChange={(e) => {\n          setOutput(e.target.value);\n        }}\n      >\n        {midi.outputs &&\n          midi.outputs.map((out) => (\n            <option key={out.id} value={out.id}>\n              {out.name}\n            </option>\n          ))}\n      </select>\n\n      <button\n        style={{\n          padding: \"20px\",\n          margin: \"20px\",\n        }}\n        onClick={() => {\n          output &&\n            midi.getOutputById &&\n            midi.getOutputById(output).playNote(\"C3\");\n        }}\n      >\n        Play C3 to output\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Router } from \"./Router\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}